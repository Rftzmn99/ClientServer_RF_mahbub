# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rfcontrol_pb2 as rfcontrol__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rfcontrol_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RFControlStub(object):
    """The RF control service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetRFSettings = channel.unary_unary(
                '/rfcontrol.RFControl/SetRFSettings',
                request_serializer=rfcontrol__pb2.RFConfig.SerializeToString,
                response_deserializer=rfcontrol__pb2.RFResponse.FromString,
                _registered_method=True)
        self.MonitorDeviceStatus = channel.unary_stream(
                '/rfcontrol.RFControl/MonitorDeviceStatus',
                request_serializer=rfcontrol__pb2.DeviceStatusRequest.SerializeToString,
                response_deserializer=rfcontrol__pb2.DeviceStatusReply.FromString,
                _registered_method=True)
        self.BulkSetRFSettings = channel.stream_unary(
                '/rfcontrol.RFControl/BulkSetRFSettings',
                request_serializer=rfcontrol__pb2.RFConfig.SerializeToString,
                response_deserializer=rfcontrol__pb2.DelayedResponse.FromString,
                _registered_method=True)
        self.InteractingRFControl = channel.stream_stream(
                '/rfcontrol.RFControl/InteractingRFControl',
                request_serializer=rfcontrol__pb2.RFConfig.SerializeToString,
                response_deserializer=rfcontrol__pb2.RFResponse.FromString,
                _registered_method=True)


class RFControlServicer(object):
    """The RF control service definition.
    """

    def SetRFSettings(self, request, context):
        """Unary RPC for setting RF settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorDeviceStatus(self, request, context):
        """Server Streaming RPC: Continuously monitor the device status (e.g., ongoing updates).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkSetRFSettings(self, request_iterator, context):
        """Client Streaming RPC: Send multiple RF configuration requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InteractingRFControl(self, request_iterator, context):
        """Both Streaming RPC: Exchange ongoing RF configurations and device status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RFControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetRFSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRFSettings,
                    request_deserializer=rfcontrol__pb2.RFConfig.FromString,
                    response_serializer=rfcontrol__pb2.RFResponse.SerializeToString,
            ),
            'MonitorDeviceStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorDeviceStatus,
                    request_deserializer=rfcontrol__pb2.DeviceStatusRequest.FromString,
                    response_serializer=rfcontrol__pb2.DeviceStatusReply.SerializeToString,
            ),
            'BulkSetRFSettings': grpc.stream_unary_rpc_method_handler(
                    servicer.BulkSetRFSettings,
                    request_deserializer=rfcontrol__pb2.RFConfig.FromString,
                    response_serializer=rfcontrol__pb2.DelayedResponse.SerializeToString,
            ),
            'InteractingRFControl': grpc.stream_stream_rpc_method_handler(
                    servicer.InteractingRFControl,
                    request_deserializer=rfcontrol__pb2.RFConfig.FromString,
                    response_serializer=rfcontrol__pb2.RFResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rfcontrol.RFControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rfcontrol.RFControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RFControl(object):
    """The RF control service definition.
    """

    @staticmethod
    def SetRFSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rfcontrol.RFControl/SetRFSettings',
            rfcontrol__pb2.RFConfig.SerializeToString,
            rfcontrol__pb2.RFResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MonitorDeviceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/rfcontrol.RFControl/MonitorDeviceStatus',
            rfcontrol__pb2.DeviceStatusRequest.SerializeToString,
            rfcontrol__pb2.DeviceStatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkSetRFSettings(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/rfcontrol.RFControl/BulkSetRFSettings',
            rfcontrol__pb2.RFConfig.SerializeToString,
            rfcontrol__pb2.DelayedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InteractingRFControl(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/rfcontrol.RFControl/InteractingRFControl',
            rfcontrol__pb2.RFConfig.SerializeToString,
            rfcontrol__pb2.RFResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
